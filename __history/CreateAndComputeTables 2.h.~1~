#ifndef CREATETABLES_H
#define CREATETABLES_H

#include "DataForTabels.h"
#include <vector>
using std::vector;

//Класс Создает таблицы и размещает их в PageControl
class CreateAndComputeTables
{
public:
	friend class DataForTabels;

	CreateAndComputeTables()
	{
	 pages = 0;
	 strTables = 0;

	 // Для таблицы критериев
	CriteriaTab = 0;
	pageCriteria = 0;

	 dft = 0;
	 pCtrl = 0;

	 outRezult = 0;
	 pageResult = 0;
	 PageControls = 0;
	}

	~CreateAndComputeTables()
	 {
			if(strTables != 0)
			for(int i = 0; i < dft->getTableCount(); i++)
				delete strTables[i];

			if(pages != 0)
			for(int i = 0; i < dft->getTableCount(); i++)
				delete pages[i];

			if(PageControls != 0)
			for(int i = 0; i < dft->getExpertsCount(); i++)
				delete PageControls[i];

			if(CriteriaTab != 0)
			delete CriteriaTab;

			if(pageCriteria != 0)
			delete pageCriteria;

			if(outRezult != 0)
			delete outRezult;

			if(pageResult != 0)
			delete pageResult;
	 }


// Нажатие клавиши в Таблице
void __fastcall tableKeyPress(TObject *Sender, System::WideChar &Key)
	 {
		   if ((Key>='0')&&(Key<='9')) {;} // цифры
		   else if (Key==8) {} // <-
		   else
			if ((Key=='/'))
			{
				Key = '/';
			}
			else Key = 0; // не цифра
	 }


// Создать таблицы
bool createTables(DataForTabels *dft, TForm *frm)
{
			this->dft = dft;
			//pCtrl = pctrl;
			strTables = new TStringGrid * [dft->getTableCount()];
			pages = new TTabSheet * [dft->getTableCount()];
			PageControls = new TPageControl * [dft->getExpertsCount()];

//---------------------    СРАВНЕНИЕ АЛЬТЕРНАТИВ     ---------------------------

			// Создаются таблицы для сравнения альтернатив по критерию
		for(int j = 0; j < dft->getExpertsCount(); j++)
		{

		PageControls[j] = new TPageControl(frm);
		PageControls[j]->Parent = frm;
		PageControls[j]->Left = 19;
		PageControls[j]->Top = 183;
		PageControls[j]->Width = 586;
		PageControls[j]->Height = 214;
		PageControls[j]->MultiLine = true;
		PageControls[j]->ScrollOpposite = true;
		PageControls[j]->TabOrder = 2;
		PageControls[j]->Visible = false;

			for(int i = 0; i < (dft->getTableCount()); i++)
			{
				pages[i] = new TTabSheet(PageControls[j]);
				pages[i]->Caption = "Сравнение по критерию \"" + dft->getCriteriaName(i) + "\"";
				pages[i]->PageControl = PageControls[j];

				strTables[i] = new TStringGrid(pages[i]);
				strTables[i]->Left = 1;
				strTables[i]->Top = 1;
				strTables[i]->Width = PageControls[j]->Width-10;
				strTables[i]->Height = 145;
				strTables[i]->TabOrder = PageControls[j]->TabOrder  + i;
				strTables[i]->Visible = true;
				strTables[i]->ColCount = dft->getAlternativesCount() + 1; // матрица размером n на n
				strTables[i]->RowCount = dft->getAlternativesCount() + 1; // альтернатив
				strTables[i]->Options << goEditing;
				strTables[i]->OnKeyPress = tableKeyPress;
				strTables[i]->Parent = pages[i];
			}

			// Подпись фиксированых ячеек для таблиц "Сравнение по критерию"
			// название альтернатив
			for(int i = 0; i < dft->getTableCount(); i++){
				for (int j = 1; j <= dft->getAlternativesCount(); j++)
				{
					 strTables[i]->Cells[j][0] = dft->getAlternativesName(j-1);
					 strTables[i]->Cells[0][j] = dft->getAlternativesName(j-1);
				}
			}
		}

		PageControls[0]->Visible= true;

//------------------------- СРАВНЕНИЕ КРИТЕРИЕВ --------------------------------

			//Создается таблица для сравнения критериев между собой
			for(int j = 0; j < dft->getExpertsCount(); j++)
		{
				pageCriteria = new TTabSheet(PageControls[j]);
				pageCriteria->Caption = "Сравнение Критериев";
				pageCriteria->PageControl = PageControls[j];

				CriteriaTab = new TStringGrid(pageCriteria);
				CriteriaTab->Left = 1;
				CriteriaTab->Top = 1;
				CriteriaTab->Width = PageControls[j]->Width-10;
				CriteriaTab->Height = 145;
				CriteriaTab->Visible = true;
				CriteriaTab->ColCount = dft->getCriteriaCount() + 1; // матрица размером n на n
				CriteriaTab->RowCount = dft->getCriteriaCount() + 1; // альтернатив
				CriteriaTab->Options << goEditing;
				CriteriaTab->OnKeyPress = tableKeyPress;
				CriteriaTab->Parent = pageCriteria;
		}

	// Подписывает фиксированные ячейки
		for (int j = 1; j <= dft->getCriteriaCount(); j++)
		{
				CriteriaTab->Cells[j][0] = dft->getCriteriaName(j-1);
				CriteriaTab->Cells[0][j] = dft->getCriteriaName(j-1);
		}

	// Заполняет главную диагональ "1"
			for (int j = 1; j <= dft->getCriteriaCount(); j++)
				for (int k = j; k==j; k++)
				{
					 CriteriaTab->Cells[j][k] = "1";
				}
//------------------------------------------------------------------------------

		PageControls[0]->ActivePageIndex = 0;
		return true;
}


void runCompute()
	{
		 computeMatrixForAlternatives();

		 //computeFactor();
		 //computeTotalFactor();

		 computeVectors();
		 computeWeight();
		 computeGlobalVector();
		 //computeResult();

		 outResult(pCtrl);
	}


// расчет обратной матрицы значения под главной диагональю
bool computeMatrixForAlternatives()
{
String temp;
for(int tab = 0; tab <  dft->getTableCount(); tab++)
	for(int i = 1; i <= dft->getAlternativesCount(); i++)
		for(int j = i; j <= dft->getAlternativesCount(); j++)
			{
				try
				{
					temp = strTables[tab]->Cells[j][i];

					if(temp.Pos('/') != 0)
					{
						strTables[tab]->Cells[j][i] = valueInCell( temp.SubString(temp.Pos('/')+1, temp.Length()) );
						temp = temp.SubString(temp.Pos('/')+1, temp.Length());
						strTables[tab]->Cells[i][j] = temp;
					}
					else
					{
					strTables[tab]->Cells[i][j] = valueInCell(temp);
					}
				}
				catch(...)
				{
				String msg;
				msg = "Внимание! Ошибка в таблице " + dft->getCriteriaName(tab);
				MessageDlg(msg,mtInformation, TMsgDlgButtons() << mbOK, 0);
				pCtrl->ActivePageIndex = tab;
				return false;
				}
			}
	computeMatrixForCriteria();
	return true;
}


// Расчет обратной матрицы для таблицы Критерии
bool computeMatrixForCriteria()
{
String temp;
	for(int i = 1; i <= dft->getCriteriaCount(); i++)
		for(int j = i; j <= dft->getCriteriaCount(); j++)
			{
				try
				{
					temp = CriteriaTab->Cells[j][i];

					if(temp.Pos('/') != 0)
					{
						CriteriaTab->Cells[j][i] = valueInCell( temp.SubString(temp.Pos('/')+1, temp.Length()) );
						temp = temp.SubString(temp.Pos('/')+1, temp.Length());
						CriteriaTab->Cells[i][j] = temp;
					}
					else
					{
					CriteriaTab->Cells[i][j] = valueInCell(temp);
					}
				}
				catch(...)
				{
				String msg;
				msg = "Внимание! Ошибка в таблице Сравнение Критериев";
				MessageDlg(msg,mtInformation, TMsgDlgButtons() << mbOK, 0);
				pCtrl->ActivePageIndex = pCtrl->PageCount - 1;
				return false;
				}
			}
	return true;
}


// Вычисляет значение в ячейке
String valueInCell(String str)
	{return FloatToStr(1.0 / StrToFloat(str));}


void computeVectors()
{
//------------------------------------------------------------------------------
	// Вектора для таблицы Альтернатив
	double res = 0, temp = 1;

	for(int tab = 0; tab < dft->getTableCount(); tab++)
		for(int i = 1; i <= dft->getAlternativesCount(); i++)
		{
			 for(int j = 1; j <= dft->getAlternativesCount(); j++)
				{
				   temp *= StrToFloat(strTables[tab]->Cells[j][i]);
				}
					res = pow(temp, 1.0 / (double)dft->getAlternativesCount());
					VectorsAlternatives.push_back(res);
					temp = 1;
		}

	// Ветор для таблицы Критерии
		for(int i = 1; i <= dft->getCriteriaCount(); i++)
		{
			 for(int j = 1; j <= dft->getCriteriaCount(); j++)
				{
				   temp *= StrToFloat(CriteriaTab->Cells[j][i]);
				}
					res = pow(temp, 1.0 / (double)dft->getCriteriaCount());
					VectorCriterias.push_back(res);
					temp = 1;
		}
}


void computeWeight()
{
//-------------------     ВЕС ДЛЯ ТАБЛИЦ       ------------------------------

		// Альтернативы
		double summa, temp;
		int k = 0; // Для нахождения суммы каждой таблицы (вестор столбец)
		int t = 0; // Для нахождения нужного вектора для деления

		//Вес для таблиц альтернатив
		for(int i = 0; i < VectorsAlternatives.size(); i+=dft->getAlternativesCount())
		{
			for(int j = 0; j < dft->getAlternativesCount(); j++)
			{
				 summa += VectorsAlternatives[k];
				 k++;
			}

			for(int l = 0; l < dft->getAlternativesCount(); l++)
			{
				temp = VectorsAlternatives[t] / summa;
				WeightAlternatives.push_back(temp);
				t++;
			}
			summa=0;
		}

		k = 0;
		t = 0;
		summa = 0;
		//Вес для таблиц Критерии
		for(int i = 0; i < VectorCriterias.size(); i+=dft->getCriteriaCount())
		{
			for(int j = 0; j < dft->getCriteriaCount(); j++)
			{
				 summa += VectorCriterias[k];
				 k++;
			}

			for(int l = 0; l < dft->getCriteriaCount(); l++)
			{
				temp = VectorCriterias[t] / summa;
				WeightCriterias.push_back(temp);
				t++;
			}
			summa=0;
		}
//------------------------------------------------------------------------------
}


void  computeGlobalVector()
{
	double temp = 0;
	int k = 0;
	for(int i = 0; i < dft->getAlternativesCount(); i++)
	{
		for(int j = 0; j < dft->getCriteriaCount(); j++)
		{
			double a;
			double b;
			a = WeightCriterias[j];
			b = WeightAlternatives[k];
			 temp +=  a * b;
			 k+=3;
		}
		globalVectors.push_back(temp);
		temp = 0;
		k = i+1;
	}
}


void outResult(TPageControl *pCtrl)
{

	pageResult = new TTabSheet(pCtrl);
	pageResult->Caption = "Результат";
	pageResult->PageControl = pCtrl;

	outRezult = new TMemo(pCtrl);
	outRezult->Width = pCtrl->Width - 10;
	outRezult->Height  = 145;
	outRezult->ScrollBars = ssVertical;
	outRezult->Parent = pageResult;

	double max = globalVectors[0];
	short index = 0;

	TVarRec args[1];
	String format;

	outRezult->Lines->Add("\nАльтернативы:\n");
	for(int i = 0; i < dft->getAlternativesCount(); i++)
	{
		args[0] = globalVectors[i];

		format = format.Format("%.2f", &args[0], 0);

		if(globalVectors[i] > max)
		{
			max = globalVectors[i];
			index = i;
		}

		outRezult->Lines->Add(dft->getAlternativesName(i) + " = " + FloatToStr(StrToFloat(format) * 100.0) + "%");
		outRezult->Lines->Add("\n");
	}

	outRezult->Lines->Add("\nЛучшая альтернатива\n");

	args[0] = max;
	format = format.Format("%.2f", &args[0], 0);

	outRezult->Lines->Add(dft->getAlternativesName(index) + " = " + FloatToStr(StrToFloat(format) * 100.0) + "%");
	pCtrl->ActivePageIndex = pCtrl->PageCount - 1;
}


void SaveToFile(TSaveDialog *SaveDlg)
{

}


void LoadFormFile(TOpenDialog *OpnDlg)
{

}

//------------------------------------------------------------------------------
private:
	 TTabSheet **pages;
	 TStringGrid **strTables;
	 TPageControl **PageControls;

	 // Для таблицы критериев
	 TStringGrid *CriteriaTab;
	 TTabSheet *pageCriteria;

	 DataForTabels *dft;
	 TPageControl *pCtrl;

	vector<double> VectorsAlternatives;
	vector<double> VectorCriterias;

	vector<double> WeightAlternatives;
	vector<double> WeightCriterias;

	vector<double> globalVectors;
	vector<double> factorCoefficient;

	double summa;
	double totalFactor;

	TMemo *outRezult;
	TTabSheet *pageResult;
};

#endif
